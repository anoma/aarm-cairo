defmodule NifTest do
  use ExUnit.Case

  doctest Cairo.CairoProver
  doctest Cairo.CairoVM

  test "cairo_encryption_test" do
    {:ok, program} = File.read("./native/cairo_vm/encryption.json")
    {:ok, input} = File.read("./native/cairo_vm/encryption_input.json")

    {_output, trace, memory, vm_public_input} =
      Cairo.cairo_vm_runner(
        program,
        input
      )

    # Prove and verify
    {proof, public_input} = Cairo.prove(trace, memory, vm_public_input)
    assert true = Cairo.verify(proof, public_input)

    expected_cipher = [
      [
        6,
        47,
        219,
        22,
        194,
        174,
        40,
        159,
        89,
        4,
        141,
        198,
        82,
        112,
        107,
        59,
        214,
        206,
        166,
        170,
        248,
        96,
        148,
        123,
        74,
        195,
        202,
        86,
        105,
        91,
        34,
        217
      ],
      [
        7,
        147,
        230,
        23,
        158,
        105,
        165,
        26,
        101,
        59,
        116,
        4,
        125,
        218,
        30,
        45,
        123,
        146,
        221,
        134,
        71,
        99,
        207,
        221,
        50,
        4,
        139,
        158,
        164,
        54,
        97,
        60
      ],
      [
        0,
        209,
        23,
        78,
        184,
        57,
        77,
        169,
        137,
        58,
        39,
        27,
        178,
        118,
        140,
        216,
        237,
        77,
        205,
        224,
        227,
        124,
        120,
        155,
        252,
        117,
        48,
        176,
        47,
        219,
        194,
        96
      ],
      [
        0,
        249,
        220,
        147,
        48,
        219,
        60,
        184,
        9,
        91,
        246,
        142,
        176,
        100,
        111,
        150,
        163,
        97,
        251,
        243,
        242,
        83,
        249,
        49,
        72,
        22,
        11,
        53,
        24,
        88,
        59,
        56
      ],
      [
        1,
        120,
        112,
        136,
        90,
        89,
        143,
        126,
        19,
        148,
        211,
        38,
        232,
        199,
        91,
        213,
        100,
        80,
        94,
        58,
        134,
        21,
        43,
        162,
        18,
        163,
        184,
        82,
        38,
        207,
        102,
        216
      ],
      [
        6,
        73,
        195,
        246,
        1,
        116,
        32,
        146,
        159,
        57,
        143,
        134,
        212,
        65,
        13,
        197,
        12,
        1,
        47,
        86,
        164,
        129,
        16,
        142,
        167,
        205,
        22,
        12,
        233,
        45,
        47,
        185
      ],
      [
        2,
        61,
        186,
        28,
        183,
        14,
        174,
        146,
        16,
        222,
        80,
        143,
        215,
        63,
        6,
        119,
        179,
        209,
        8,
        52,
        70,
        236,
        63,
        34,
        148,
        140,
        217,
        9,
        209,
        117,
        167,
        159
      ],
      [
        5,
        205,
        131,
        84,
        95,
        202,
        60,
        242,
        38,
        107,
        29,
        43,
        7,
        128,
        178,
        40,
        212,
        169,
        247,
        78,
        194,
        76,
        45,
        97,
        8,
        103,
        198,
        250,
        72,
        222,
        45,
        210
      ],
      [
        4,
        196,
        92,
        31,
        33,
        174,
        49,
        234,
        61,
        151,
        136,
        27,
        218,
        217,
        254,
        22,
        66,
        51,
        138,
        176,
        154,
        76,
        170,
        89,
        67,
        76,
        146,
        14,
        202,
        3,
        125,
        91
      ],
      [
        5,
        166,
        158,
        42,
        155,
        40,
        33,
        247,
        203,
        153,
        113,
        158,
        118,
        141,
        43,
        160,
        75,
        232,
        149,
        51,
        72,
        3,
        54,
        18,
        143,
        136,
        118,
        11,
        13,
        198,
        73,
        82
      ],
      [
        7,
        200,
        130,
        77,
        190,
        105,
        183,
        38,
        12,
        223,
        225,
        40,
        238,
        234,
        216,
        205,
        175,
        21,
        110,
        79,
        218,
        183,
        105,
        111,
        205,
        142,
        140,
        210,
        63,
        7,
        117,
        197
      ],
      [
        1,
        239,
        21,
        193,
        133,
        153,
        151,
        27,
        123,
        236,
        237,
        65,
        90,
        64,
        240,
        199,
        222,
        172,
        253,
        155,
        13,
        24,
        25,
        224,
        61,
        114,
        61,
        139,
        201,
        67,
        207,
        202
      ],
      [
        0,
        86,
        104,
        6,
        10,
        164,
        151,
        48,
        183,
        190,
        72,
        1,
        223,
        70,
        236,
        98,
        222,
        83,
        236,
        209,
        26,
        190,
        67,
        163,
        40,
        115,
        0,
        12,
        54,
        232,
        220,
        31
      ],
      [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1
      ]
    ]

    assert Cairo.get_output(public_input) == expected_cipher
  end
end
