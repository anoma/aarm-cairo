module encryption;

import Stdlib.Prelude open;
import
Stdlib.Cairo.Ec as Ec;
import Stdlib.Cairo.Poseidon open;

type Cipher :=
  mkCipher {
    cipher_text : List Field;
    cur_state : Field
  };

update_poseidon_state (cur_msg secret_key_x : Field) (cipher : Cipher) : Cipher :=
  let
    new_state := Cipher.cur_state cipher + cur_msg;
  in mkCipher@{
    cipher_text := snoc (Cipher.cipher_text cipher) new_state;
    -- cipher_text := Cipher.cipher_text cipher ++ [new_state];
    cur_state := poseidonHash2 new_state secret_key_x
  };

generate_cipher (cipher : Cipher) (secret_key_x : Field) : List Field -> Cipher
  | [] := cipher
  | (m :: ms) := generate_cipher (update_poseidon_state m secret_key_x cipher) secret_key_x ms;

-- pad_messages
--   (messages : List Field)
--   : List Field :=
--   let
--     n : Nat := length messages;
--   in if
--     | n < 10 := messages ++ replicate (10 - n) 0;
--     | n == 10 := messages;
--     | else := take 10 messages;

encryption
  (messages : List Field) (pk_x : Field) (pk_y : Field) (sk : Field) (nonce : Field) : List Field :=

  let
    -- Generate encryption key
    pk := Ec.mkPoint pk_x pk_y;
    secret_key := Ec.mul sk pk;

    -- PLAINTEXT_NUM := 10;

    -- TODO: Pad the messages here or outside of the circuit?
    plaintext := messages;

    -- Init poseidon state
    secret_key_x := Ec.Point.x secret_key;
    poseidon_state := poseidonHashList [secret_key_x; Ec.Point.y secret_key; nonce; 10];

    -- Generate cipher
    cipher :=
      mkCipher@{
        cipher_text := [];
        cur_state := poseidon_state
      };

    final_cipher := generate_cipher cipher secret_key_x plaintext;

    -- Get MAC
    mac := Cipher.cur_state final_cipher;

    -- Generate sender's pk
    generator := Ec.mkPoint Ec.StarkCurve.GEN_X Ec.StarkCurve.GEN_Y;
    sender_pk := Ec.mul sk generator;

  in Cipher.cipher_text final_cipher ++ [mac; Ec.Point.x sender_pk; Ec.Point.y sender_pk; nonce];

main
  (messages : List Field) (pk_x : Field) (pk_y : Field) (sk : Field) (nonce : Field) : List Field :=
  encryption messages pk_x pk_y sk nonce;